{ config, lib, pkgs, ... }:

let
  cfg = config.services.weblate;

  weblateConfig = ''

    # This was autogenerated by the NixOS module.

    SITE_TITLE = "Weblate"
    SITE_DOMAIN = "${cfg.localDomain}"
    # TLS terminates at the reverse proxy, so we can handle ACME in an unified way.
    ENABLE_HTTPS = False
    DEBUG = True

    ${cfg.extraConfig}
  '';
  settings_py = pkgs.runCommand "weblate_settings.py" { } ''
    mkdir -p $out
    cat ${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/settings_example.py > $out/settings.py
    cat >> $out/settings.py <<EOF${weblateConfig}EOF
  '';
  uwsgiConfig.uwsgi = {
    type = "normal";
    socket = "/run/weblate.socket";
    chmod-socket = "770";
    chown-socket = "weblate:weblate";
    uid = "weblate";
    gid = "weblate";
    enable-threads = true;
    master = true;
    wsgi-file = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/wsgi.py";
    pyhome = pkgs.python3.withPackages (self: [ pkgs.weblate ]);
  };
in
{

  options = {
    services.weblate = {
      enable = lib.mkEnableOption "Weblate service";

      localDomain = lib.mkOption {
        description = "The domain serving your Weblate instance.";
        example = "weblate.example.org";
        type = lib.types.str;
      };

      extraConfig = lib.mkOption {
        type = lib.types.lines;
        default = "";
        description = ''
          Text to append to <filename>settings.py</filename> Weblate config file.
        '';
      };

    };
  };

  config = lib.mkIf cfg.enable {
    assertions = [ ];

    services.nginx = {
      enable = true;
      recommendedProxySettings = true; # required for redirections to work
      virtualHosts."${cfg.localDomain}" = {

        forceSSL = true;
        enableACME = true;

        locations = {
          "= /favicon.ico".alias = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/static/favicon.ico";
          "/static/".alias = "/var/lib/weblate/static/";
          "/media/".alias = "/var/lib/weblate/media/";
          "/".extraConfig = ''
            # Needed for long running operations in admin interface
            uwsgi_read_timeout 3600;
            # Adjust based to uwsgi configuration:
            uwsgi_pass unix:///run/weblate.socket;
            # uwsgi_pass 127.0.0.1:8080;
          '';
        };

      };
    };

    systemd.services.weblate = {
      description = "Weblate";
      after = [ "network.target" "postgresql.service" "redis.service" ];
      wantedBy = [ "multi-user.target" ];
      environment = {
        PYTHONPATH = "${settings_py}";
        DJANGO_SETTINGS_MODULE = "settings";
      };
      path = with pkgs; [
        git
        pango
        cairo

        #optional
        git-review
        tesseract
        licensee
      ];
      serviceConfig = {
        ExecStart = "${pkgs.uwsgi}/bin/uwsgi --json ${pkgs.writeText "uwsgi.json" (builtins.toJSON uwsgiConfig)}";
        Restart = "always";
        RestartSec = 20;
        WorkingDirectory = pkgs.weblate;
        RuntimeDirectory = "weblate";
        RuntimeDirectoryMode = "0750"; # ?
      };
    };

    systemd.sockets.weblate = {
      before = [ "nginx.service" ];
      socketConfig.ListenStream = "/run/weblate.socket";
    };

    services.postfix = {
      enable = true;
    };

    services.redis = {
      enable = true;
    };

    services.postgresql = {
      enable = true;
      ensureUsers = [
        {
          name = "weblate";
          ensurePermissions."DATABASE weblate" = "ALL PRIVILEGES";
        }
      ];
      ensureDatabases = [ "weblate" ];
    };

    users.users.weblate = {
      isSystemUser = true;
    };

    users.groups.weblate.members = [ config.services.nginx.user ];
  };

  meta.maintainers = with lib.maintainers; [ erictapen ];

}
