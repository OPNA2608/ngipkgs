{ config, lib, pkgs, ... }:

let
  cfg = config.services.weblate;

  # This extends and overrides the weblate/settings_example.py code found in upstream.
  weblateConfig = ''

    # This was autogenerated by the NixOS module.

    SITE_TITLE = "Weblate"
    SITE_DOMAIN = "${cfg.localDomain}"
    # TLS terminates at the reverse proxy, so we can handle ACME in an unified way.
    ENABLE_HTTPS = False
    DEBUG = True
    DATA_DIR = "/var/lib/weblate"
    STATIC_ROOT = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/static/"
    MEDIA_ROOT = "/var/lib/weblate/media"

    DATABASES = {
      "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "/run/postgresql",
        "NAME": "weblate",
        "USER": "weblate",
        "PASSWORD": "",
        "PORT": ""
      }
    }

    with open("${cfg.djangoSecretKeyFile}") as f:
      SECRET_KEY = f.read().rstrip("\n")

    CACHES = {
      "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
      }
    }

    ${cfg.extraConfig}
  '';
  settings_py = pkgs.runCommand "weblate_settings.py" { } ''
    mkdir -p $out
    cat ${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/settings_example.py > $out/settings.py
    cat >> $out/settings.py <<EOF${weblateConfig}EOF
  '';
  uwsgiConfig.uwsgi = {
    type = "normal";
    plugins = [ "python3" ];
    master = true;
    socket = "/run/weblate.socket";
    chmod-socket = "770";
    chown-socket = "weblate:weblate";
    uid = "weblate";
    gid = "weblate";
    wsgi-file = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/wsgi.py";
    pyhome = pkgs.python3.withPackages (self: [ pkgs.weblate ]);

    # Some more recommendations by upstream:
    # https://docs.weblate.org/en/latest/admin/install.html#sample-configuration-for-nginx-and-uwsgi
    buffer-size = 8192;
    reload-on-rss = 250;
    workers = 8;
    enable-threads = true;
    close-on-exec = true;
    umask = "0022";
    ignore-sigpipe = true;
    ignore-write-errors = true;
    disable-write-exception = true;
  };
in
{

  options = {
    services.weblate = {
      enable = lib.mkEnableOption "Weblate service";

      localDomain = lib.mkOption {
        description = "The domain serving your Weblate instance.";
        example = "weblate.example.org";
        type = lib.types.str;
      };

      djangoSecretKeyFile = lib.mkOption {
        description = ''
          Location of the Django secret key.

          This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.
        '';
        type = lib.types.path;
      };

      extraConfig = lib.mkOption {
        type = lib.types.lines;
        default = "";
        description = ''
          Text to append to <filename>settings.py</filename> Weblate config file.
        '';
      };

    };
  };

  config = lib.mkIf cfg.enable {
    assertions = [ ];

    services.nginx = {
      enable = true;
      recommendedProxySettings = true; # required for redirections to work
      virtualHosts."${cfg.localDomain}" = {

        forceSSL = true;
        enableACME = true;

        locations = {
          "= /favicon.ico".alias = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/static/favicon.ico";
          "/static/".alias = "${pkgs.weblate}/lib/${pkgs.python3.libPrefix}/site-packages/weblate/static/";
          "/media/".alias = "/var/lib/weblate/media/";
          "/".extraConfig = ''
            # Needed for long running operations in admin interface
            uwsgi_read_timeout 3600;
            # Adjust based to uwsgi configuration:
            uwsgi_pass unix:///run/weblate.socket;
            # uwsgi_pass 127.0.0.1:8080;
          '';
        };

      };
    };

    systemd.services.weblate-postgresql = {
      description = "Weblate PostgreSQL setup";
      wantedBy = [ "multi-user.target" ];
      after = [ "postgresql.service" ];
      serviceConfig = {
        Type = "oneshot";
        User = "postgres";
        Group = "postgres";
        ExecStart = ''
          ${pkgs.postgresql}/bin/psql weblate -c "CREATE EXTENSION IF NOT EXISTS pg_trgm"
        '';
      };
    };

    systemd.services.weblate-migrate = {
      description = "Weblate migration";
      wantedBy = [ "multi-user.target" ];
      after = [ 
        "postgresql.service"
        "weblate-postgresql.service"
      ];
      environment = {
        PYTHONPATH = "${settings_py}";
        DJANGO_SETTINGS_MODULE = "settings";
        GI_TYPELIB_PATH = "${pkgs.pango.out}/lib/girepository-1.0:${pkgs.harfbuzz}/lib/girepository-1.0";
      };
      path = with pkgs; [ gitSVN ];
      serviceConfig = {
        Type = "oneshot";
        # WorkingDirectory = pkgs.weblate;
        StateDirectory = "weblate";
        User = "weblate";
        Group = "weblate";
        ExecStart = "${pkgs.weblate}/bin/weblate migrate --noinput";
      };
    };

    systemd.services.weblate = {
      description = "Weblate";
      after = [
        "network.target"
        "postgresql.service"
        "redis.service"
        "weblate-migrate.service"
        "weblate-postgresql.service"
      ];
      requires = [
        "weblate-migrate.service"
        "weblate-postgresql.service"
      ];
      wantedBy = [ "multi-user.target" ];
      environment = {
        PYTHONPATH = "${settings_py}";
        DJANGO_SETTINGS_MODULE = "settings";
        GI_TYPELIB_PATH = "${pkgs.pango.out}/lib/girepository-1.0:${pkgs.harfbuzz}/lib/girepository-1.0";
      };
      path = with pkgs; [
        gitSVN

        #optional
        git-review
        tesseract
        licensee
      ];
      serviceConfig = {
        ExecStart =
          let
            uwsgi = pkgs.uwsgi.override { plugins = [ "python3" ]; };
            jsonConfig = pkgs.writeText "uwsgi.json" (builtins.toJSON uwsgiConfig);
          in
          "${uwsgi}/bin/uwsgi --json ${jsonConfig}";
        Restart = "always";
        RestartSec = 20;
        WorkingDirectory = pkgs.weblate;
        StateDirectory = "weblate";
        User = "weblate";
        Group = "weblate";
      };
    };

    systemd.sockets.weblate = {
      before = [ "nginx.service" ];
      wantedBy = [ "sockets.target" ];
      socketConfig = {
        ListenStream = "/run/weblate.socket";
        SocketUser = "weblate";
        SocketGroup = "weblate";
        SocketMode = "770";
      };
    };

    services.postfix = {
      enable = true;
    };

    services.redis = {
      enable = true;
      unixSocket = "/run/redis/redis.sock";
    };

    services.postgresql = {
      enable = true;
      ensureUsers = [
        {
          name = "weblate";
          ensurePermissions."DATABASE weblate" = "ALL PRIVILEGES";
        }
      ];
      ensureDatabases = [ "weblate" ];
    };

    users.users.weblate = {
      isSystemUser = true;
    };

    users.groups.weblate.members = [ config.services.nginx.user ];
  };

  meta.maintainers = with lib.maintainers; [ erictapen ];

}
